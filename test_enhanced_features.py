#!/usr/bin/env python3
"""
Test script for enhanced blockchain features including:
- File hashing and upload
- File verification
- Tamper detection
- Audit trail
- File statistics
"""

import hashlib
import os
import tempfile
from app.services.blockchain_service import BlockchainService

def calculate_file_hash(file_path):
    """Calculate SHA-256 hash of a file"""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def create_test_file(content, filename="test_file.txt"):
    """Create a temporary test file with given content"""
    temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt')
    temp_file.write(content)
    temp_file.close()
    return temp_file.name

def test_file_upload_and_verification():
    """Test file upload and verification functionality"""
    print("=" * 60)
    print("TESTING FILE UPLOAD AND VERIFICATION")
    print("=" * 60)
    
    blockchain_service = BlockchainService()
    
    # Create test file
    test_content = "This is a test medical record.\nPatient: John Doe\nDiagnosis: Healthy\nDate: 2024-01-15"
    test_file_path = create_test_file(test_content)
    
    try:
        # Calculate hash
        file_hash = calculate_file_hash(test_file_path)
        print(f"Original file hash: {file_hash}")
        
        # Upload to blockchain
        print("\n1. Uploading file to blockchain...")
        upload_result = blockchain_service.upload_file_to_blockchain(
            file_hash=file_hash,
            ipfs_hash="QmTestHash123",
            filename="test_medical_record.txt",
            record_type="medical_file"
        )
        
        if upload_result.get('success'):
            print("‚úÖ File uploaded successfully!")
            print(f"Transaction hash: {upload_result.get('transaction_hash')}")
        else:
            print(f"‚ùå Upload failed: {upload_result.get('error')}")
            return False
        
        # Verify original file
        print("\n2. Verifying original file...")
        verify_result = blockchain_service.verify_file(file_hash, file_hash)
        
        if verify_result.get('success') and verify_result.get('is_valid'):
            print("‚úÖ Original file verification successful!")
        else:
            print(f"‚ùå Original file verification failed: {verify_result.get('error')}")
            return False
        
        # Create tampered file
        print("\n3. Creating tampered file...")
        tampered_content = test_content + "\n\nTAMPERED: This line was added maliciously"
        tampered_file_path = create_test_file(tampered_content, "tampered_file.txt")
        tampered_hash = calculate_file_hash(tampered_file_path)
        print(f"Tampered file hash: {tampered_hash}")
        
        # Verify tampered file
        print("\n4. Verifying tampered file...")
        tampered_verify_result = blockchain_service.verify_file(file_hash, tampered_hash)
        
        if tampered_verify_result.get('success') and not tampered_verify_result.get('is_valid'):
            print("‚úÖ Tampered file correctly detected as invalid!")
        else:
            print(f"‚ùå Tampered file verification failed: {tampered_verify_result.get('error')}")
            return False
        
        # Test tamper detection
        print("\n5. Testing tamper detection...")
        tamper_result = blockchain_service.detect_tampering(file_hash, tampered_hash)
        
        if tamper_result.get('success') and tamper_result.get('is_tampered'):
            print("‚úÖ Tampering detection successful!")
            print(f"Original hash: {tamper_result.get('original_hash')}")
            print(f"Current hash: {tamper_result.get('current_hash')}")
        else:
            print(f"‚ùå Tamper detection failed: {tamper_result.get('error')}")
            return False
        
        # Get file info
        print("\n6. Getting file information...")
        file_info = blockchain_service.get_file_info(file_hash)
        
        if file_info.get('success'):
            print("‚úÖ File info retrieved successfully!")
            print(f"Filename: {file_info.get('filename')}")
            print(f"Record type: {file_info.get('record_type')}")
            print(f"Upload time: {file_info.get('upload_time')}")
            print(f"Verification count: {file_info.get('verification_count')}")
        else:
            print(f"‚ùå Failed to get file info: {file_info.get('error')}")
            return False
        
        # Get audit trail
        print("\n7. Getting audit trail...")
        audit_result = blockchain_service.get_audit_trail(file_hash)
        
        if audit_result.get('success'):
            print("‚úÖ Audit trail retrieved successfully!")
            print(f"Number of audit entries: {len(audit_result.get('audit_entries', []))}")
            for entry in audit_result.get('audit_entries', []):
                print(f"  - {entry.get('action')}: {entry.get('details')}")
        else:
            print(f"‚ùå Failed to get audit trail: {audit_result.get('error')}")
            return False
        
        # Clean up
        os.unlink(test_file_path)
        os.unlink(tampered_file_path)
        
        print("\nüéâ All tests passed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed with exception: {e}")
        return False

def test_file_statistics():
    """Test file statistics functionality"""
    print("\n" + "=" * 60)
    print("TESTING FILE STATISTICS")
    print("=" * 60)
    
    blockchain_service = BlockchainService()
    
    try:
        # Get file statistics
        print("1. Getting file statistics...")
        stats_result = blockchain_service.get_file_statistics()
        
        if stats_result.get('success'):
            print("‚úÖ File statistics retrieved successfully!")
            print(f"Total files: {stats_result.get('total_files')}")
            print(f"Valid files: {stats_result.get('valid_files')}")
            print(f"Invalid files: {stats_result.get('invalid_files')}")
        else:
            print(f"‚ùå Failed to get statistics: {stats_result.get('error')}")
            return False
        
        # Get all files
        print("\n2. Getting all files...")
        all_files_result = blockchain_service.get_all_files()
        
        if all_files_result.get('success'):
            print("‚úÖ All files retrieved successfully!")
            print(f"Number of files: {len(all_files_result.get('files', []))}")
            for file_info in all_files_result.get('files', []):
                print(f"  - {file_info.get('filename')} (Hash: {file_info.get('file_hash')[:16]}...)")
        else:
            print(f"‚ùå Failed to get all files: {all_files_result.get('error')}")
            return False
        
        print("\nüéâ Statistics tests passed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Statistics test failed with exception: {e}")
        return False

def test_file_invalidation():
    """Test file invalidation functionality (admin only)"""
    print("\n" + "=" * 60)
    print("TESTING FILE INVALIDATION")
    print("=" * 60)
    
    blockchain_service = BlockchainService()
    
    try:
        # Create a test file for invalidation
        test_content = "This file will be invalidated for testing purposes."
        test_file_path = create_test_file(test_content, "invalidation_test.txt")
        file_hash = calculate_file_hash(test_file_path)
        
        # Upload file first
        print("1. Uploading file for invalidation test...")
        upload_result = blockchain_service.upload_file_to_blockchain(
            file_hash=file_hash,
            ipfs_hash="QmInvalidationTest",
            filename="invalidation_test.txt",
            record_type="test_file"
        )
        
        if not upload_result.get('success'):
            print(f"‚ùå Failed to upload file for invalidation test: {upload_result.get('error')}")
            return False
        
        # Try to invalidate file
        print("2. Attempting to invalidate file...")
        invalidate_result = blockchain_service.invalidate_file(file_hash)
        
        if invalidate_result.get('success'):
            print("‚úÖ File invalidated successfully!")
        else:
            print(f"‚ö†Ô∏è  File invalidation failed (expected if not admin): {invalidate_result.get('error')}")
            print("This is normal if the current account doesn't have admin privileges.")
        
        # Clean up
        os.unlink(test_file_path)
        
        print("\nüéâ Invalidation test completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Invalidation test failed with exception: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Starting Enhanced Blockchain Features Test Suite")
    print("This test suite verifies all the new blockchain functionality:")
    print("- File hashing and upload")
    print("- File verification")
    print("- Tamper detection")
    print("- Audit trail")
    print("- File statistics")
    print("- File invalidation")
    
    # Run tests
    test_results = []
    
    test_results.append(test_file_upload_and_verification())
    test_results.append(test_file_statistics())
    test_results.append(test_file_invalidation())
    
    # Summary
    print("\n" + "=" * 60)
    print("TEST SUMMARY")
    print("=" * 60)
    
    passed = sum(test_results)
    total = len(test_results)
    
    print(f"Tests passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All tests passed! The enhanced blockchain features are working correctly.")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the blockchain connection and contract deployment.")
    
    print("\nEnhanced features implemented:")
    print("‚úÖ SHA-256 file hashing")
    print("‚úÖ Blockchain file storage")
    print("‚úÖ File integrity verification")
    print("‚úÖ Tamper detection")
    print("‚úÖ Comprehensive audit trail")
    print("‚úÖ File statistics and metrics")
    print("‚úÖ Admin file invalidation")
    print("‚úÖ Smart contract automation")
    print("‚úÖ UI/UX for all features")

if __name__ == "__main__":
    main() 